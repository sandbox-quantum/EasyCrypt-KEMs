(*^ 
  Binding security for (very) high-level specification of ML-KEM.
  Specification considered here abstracts away from any algebraic
  structure used in the construction, particularly 
  viewing the PKE procedures as abstract (black box) operators.
  To be instantiated and linked to lower-level specification
  and, in turn, implementation.
^*)
(* Require/Import *)
require import AllCore Distr.
require (*--*) KeyedHashFunctions PublicKeyEncryption KeyEncapsulationMechanismsROM.


(* Types *)
(* General *)
(** Randomness ("seeds") **)
type rand_t.


(* Underlying PKE scheme (K-PKE) *)
(** Public keys **)
type pk_t_pke.

(** Secret keys **)
type sk_t_pke.

(** Plaintexts of underlying PKE scheme **)
type ptxt_t = rand_t.

(** Ciphertexts **)
type ctxt_t_pke.


(* KEM (ML-KEM *)
(** Public keys **)
type pk_t = pk_t_pke.

(** Secret keys  **)
type sk_t = sk_t_pke * pk_t * rand_t * rand_t.

(** Shared/session keys (symmetric) **)
type key_t = rand_t.

(** Ciphertexts/Encapsulations **)
type ctxt_t = ctxt_t_pke.








(* Operators *)
(** Note: perhaps add   **)

(** Hash function H, used to hash public keys **)
op H : pk_t -> rand_t.

(** Hash function J ("keyed"), used to compute implicit rejection key **)
op J : rand_t -> ctxt_t -> key_t.

(** Operator capturing encryption function of underlying PKE scheme **)
op enc : rand_t -> pk_t -> ptxt_t -> ctxt_t.

(** Operator capturing decryption function of underlying PKE scheme **)
op dec : sk_t -> ctxt_t -> ptxt_t option.


(* Distributions *)
(* Proper distribution representing key generation of underlying PKE scheme *)
op [lossless] dkg : (pk_t * sk_t) distr.

(** Proper, full, and uniform distribution over randomness **)
op [lossless full uniform] drand : rand_t distr.

(** Distribution over (shared) keys (output of J)  **)
op [lossless] dkey : key_t distr.


(* Clones/Imports *)
(* Definitions and properties for J as a keyed hash function *)
clone import KeyedHashFunctions as J_KHF with 
  type key_t <- rand_t,
  type in_t <- ctxt_t,
  type out_t <- key_t,
  
  op f <- J
  
  proof *. 

(* PRF property for J *)
clone import PRF as J_PRF with
  op dkey <- drand,
  op doutm <- fun _ => dkey,
  
  axiom dkey_ll <- drand_ll
  
  proof *.
  realize doutm_ll by move=> ?; exact: dkey_ll.

 
(* Definitions and properties for KEMs (in the ROM) with types as required for ML-KEM *)
clone import KeyEncapsulationMechanismsROM as KEMsROM with
  type pk_t <- pk_t,
  type sk_t <- sk_t,
  type key_t <- key_t,
  type ctxt_t <- ctxt_t,
  
  type in_t <- ptxt_t * rand_t, 
  type out_t <- key_t * rand_t
  
  proof *.

  

(*
  Note:
  The official FIPS 203 specification of ML-KEM lists only a single G
  function mapping arbitrary-length bit strings 
  (to be instantiated with sha3-512) that is used
  (1) in key generation to expand a single seed to two seeds 
  and (2) in encapsulation/decapsulation to (simulataneously) 
  generate a shared key and a randomness value (each having
  the size of a seed). Now, in an attempt minimize the 
  assumptions on the employed primitives (as well
  as simplify the reasoning), we make use of the fact that 
  the set of possible inputs given to G in key generation is 
  disjoint from the set of possible inputs given to G in
  encapsulation/decapsulation. Particularly, this implies we can
  regard these different uses of G as different (sub)functions, 
  allowing us to require the PRG property for one function
  and model another one as an RO. If we wouldn't take this approach,
  we would need to model G (as a whole) as an RO.   
  As a direct consequence, the key generation can be modeled as sampling 
  from some distribution that captures the sampling and 
  operations (including the PRG evaluations) performed by the key generation
  procedure. This is also the approach taken in the current IND-CCA proof 
  for ML-KEM, which gives another reason to also adopt it here (so equivalence proofs 
  are easier later on). Here, we denote the distribution representing key
  generation by dkg (see above).
*)

(* 
  Next steps:
  Define module K-PKE (straightforwardrly using above distributions and operators)
  Next, use it to define ML-KEM-HL (w.r.t. random oracle).
  Then, start proving binding properties for ML-KEM-HL in ROM
  (use PROM for RO instantiation).
  Penultimately, show equivalence of ML-KEM-HL to FO-K (in ROM),
  and binding properties for FO-K as a result.
  Finally, show binding properties for FO-K imply binding properties
  for ML-KEM-Op (which in turn gives the whole chain down to implementation,
  if code still works)
*)
(** **)
module (ML_KEM_HL_ROM : Scheme_ROM) (G : RandomOracle) = { 
  proc keygen() : pk_t * sk_t = {
    var pk : pk_t;
    var sk : sk_t;
    
    return witness;
  }
  
  proc encaps(pk : pk_t) : key_t * ctxt_t = {
    return witness;
  }
  
  proc decaps(sk : sk_t, c : ctxt_t) : key_t option = {
    return witness;
  }
}.
