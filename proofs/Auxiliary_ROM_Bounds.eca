(* Require/Import *)
require import AllCore Distr PROM.
require (*--*) DMap DProd.
require (*--*) KeyEncapsulationMechanisms.
require (*--*) HashFunctions.


(* Types *)
(* General *)
(** Randomness ("seeds") **)
type rand_t.


(* Underlying PKE scheme (K-PKE) *)
(** Public keys **)
type pk_t_pke.

(** Secret keys **)
type sk_t_pke.

(** Plaintexts of underlying PKE scheme **)
type ptxt_t = rand_t.

(** Ciphertexts **)
type ctxt_t_pke.


(* KEM (ML-KEM *)
(** Public keys **)
type pk_t = pk_t_pke.

(** Secret keys  **)
type sk_t = sk_t_pke * pk_t * rand_t * rand_t.

(** Shared/session keys (symmetric) **)
type key_t = rand_t.

(** Ciphertexts/Encapsulations **)
type ctxt_t = ctxt_t_pke.


(* Operators *)
(** Hash function H, used to hash public keys to randomness **)
op H : pk_t -> rand_t.

(** 
  Hash function G, used to hash (pairs of) plaintexts and 
  hashes of public keys (randomness) to (pairs of) keys and randomness 
**)
op G : ptxt_t * rand_t -> key_t * rand_t. 

(** 
  Hash function J, used to hash (pairs of) randomness and ciphertexts 
  to shared keys (for implicit rejection)
**)
op J : rand_t * ctxt_t -> key_t.

(** Operator capturing "derandomized" key generation of underlying PKE scheme **)
op kg : rand_t -> pk_t_pke * sk_t_pke.

(** Operator capturing "derandomized" encryption function of underlying PKE scheme **)
op enc : rand_t -> pk_t_pke -> ptxt_t -> ctxt_t_pke.

(** Operator capturing decryption function of underlying PKE scheme **)
(**
  By design, the underlying PKE scheme never returns a failure, 
  so we refrain from using option monad as output.
**)
op dec : sk_t_pke -> ctxt_t_pke -> ptxt_t.


(* Distributions *)
(** Proper, full, and uniform distribution over randomness **)
op [lossless full uniform] drand : rand_t distr.

(** Proper, full, and uniform distribution over (shared) keys **)
op [lossless full uniform] dkey : key_t distr.

(** Proper, full, and uniform distribution over pairs of (shared) keys and randomness **) 
op [lossless full uniform] dkeyrand : (key_t * rand_t) distr.

(** `dkeyrand` is equal to the product distribution of dkey and drand **)
lemma dkeyrand_dprod : dkeyrand = dkey `*` drand.
proof. 
rewrite &(eq_funi_ll) ?is_full_funiform ?(dkeyrand_ll, dkeyrand_fu, dkeyrand_uni).
+ by rewrite dprod_fu_auto ?(dkey_fu, drand_fu) /=. 
+ by rewrite dprod_uni 1,2:(dkey_uni, drand_uni). 
by rewrite dprod_ll_auto 1,2:(dkey_ll, drand_ll). 
qed.

(** Distribution representing key generation of underlying PKE scheme **)
op dkg : (pk_t_pke * sk_t_pke) distr = dmap drand kg.

(** `dkg` is a proper distribution **)
lemma dkg_ll : is_lossless dkg.
proof. by rewrite dmap_ll drand_ll. qed.


(* Clones/Imports *)
(* Definitions and properties for H as a (non-keyed) hash function *)
clone import HashFunctions as H_HF with
  type in_t <- pk_t,
  type out_t <- rand_t,
  
  op f <- H
  
  proof *.

(* Definitions and properties for G as a (non-keyed) hash function *)
clone import HashFunctions as G_HF with
  type in_t <- ptxt_t * rand_t,
  type out_t <- key_t * rand_t,
  
  op f <- G
  
  proof *.
  
(* Definitions and properties for J as a (non-keyed) hash function *)
clone import HashFunctions as J_HF with
  type in_t <- rand_t * ctxt_t,
  type out_t <- key_t,
  
  op f <- J
  
  proof *.
  

print G.  
(* Definitions and properties for G as a RO *)
clone FullRO as G_RO with
  type in_t <- ptxt_t * rand_t,
  type out_t <- key_t * rand_t,
  
  op dout <- fun _ => dkeyrand
  
  
  proof *.

module RO_G = G_RO.RO.
  
  
(* Definitions and properties for J as a RO *)
clone FullRO as J_RO with
  type in_t <- rand_t * ctxt_t,
  type out_t <- key_t,
  
  op dout <- fun _ => dkey
  
  
  proof *.

module RO_J = J_RO.RO.


print J_HF.
print J_RO.

module type Adv_SFCRD_ROM (GO : G_RO.RO) = {
  proc find(pk_pke0 : pk_t_pke, sk_pke0 : sk_t_pke, pk_pke1 : pk_t_pke, sk_pke1 : sk_t_pke) : ctxt_t * ctxt_t { GO.get }
}.

module SFCRD_ROM (GO : G_RO.RO) (A : Adv_SFCRD_ROM) = { 
  proc main() : bool = {    
    var pk_pke0, pk_pke1 : pk_t_pke;
    var sk_pke0, sk_pke1 : sk_t_pke;
    var c0, c1 : ctxt_t;
    var k0', k1' : key_t;
    var r0', r1' : rand_t;
    
    GO.init();
    
    (pk_pke0, sk_pke0) <$ dkg;
    (pk_pke1, sk_pke1) <$ dkg;
    
    (c0, c1) <@ A(GO).find(pk_pke0, sk_pke0, pk_pke1, sk_pke1);
    
    (k0', r0') <@ GO.get(dec sk_pke0 c0, H pk_pke0);
    (k1', r1') <@ GO.get(dec sk_pke1 c1, H pk_pke1);
    
    return k0' = k1' /\ c0 = c1; 
  }
}.

module CRKG = {
  proc main() = {
    var pk_pke0, pk_pke1 : pk_t_pke;
    var sk_pke0, sk_pke1 : sk_t_pke;
    
    (pk_pke0, sk_pke0) <$ dkg;
    (pk_pke1, sk_pke1) <$ dkg;
    
    return H pk_pke0 = H pk_pke1;
  }
}.

section. 

declare module A <: Adv_SFCRD_ROM {-RO_G}.
declare axiom A_find_ll (O <: G_RO.RO {-A}) : 
  islossless A(O).find.
  
declare const q_G : { int | 0 <= q_G } as ge0_qG.

require import FMap.
(*
  Split sampling (of pairs) in RO G
  two independent samplings of each element
*)
local module RO_G_SSample = {
  include var RO_G [-get]

  proc get(ph : ptxt_t * rand_t) : key_t * rand_t = { 
    var k : key_t;
    var r : rand_t;
    
    k <$ dkey;
    r <$ drand;
    if (ph \notin m) {
      m.[ph] <- (k, r); 
    }
    
    return oget m.[ph];
  }
}.

local clone DProd.ProdSampling as DKR with
  type t1 <- key_t,
  type t2 <- rand_t
  
  proof *.

local equiv Eqv_ROG_ROGSS_Get :
  RO_G.get ~ RO_G_SSample.get : ={arg, glob RO_G} ==> ={res, glob RO_G}.
proof.
proc. 
wp; conseq (: _ ==> r{1} = (k, r){2}) => //.
transitivity{1} { r <@ DKR.S.sample(dkey, drand); } 
                (true ==> ={r})
                (true ==> r{1} = (k, r){2}) => //.
+ inline{2} DKR.S.sample; auto => />. 
  by rewrite dkeyrand_dprod.
transitivity{1} { r <@ DKR.S.sample2(dkey, drand); } 
                (true ==> ={r})
                (true ==> r{1} = (k, r){2}) => //.
+ by call (DKR.sample_sample2).
by inline{1} DKR.S.sample2; auto.
qed.  

(*
local module SFCRD_ROM_V = { 
  var pk_pke0, pk_pke1 : pk_t_pke
    
  proc main() : bool = {
    var sk_pke0, sk_pke1 : sk_t_pke;  
    var c0, c1 : ctxt_t;
    var k0', k1' : key_t;
    var r0', r1' : rand_t;
    
    RO_G_SSample.init();
    
    (pk_pke0, sk_pke0) <$ dkg;
    (pk_pke1, sk_pke1) <$ dkg;
    
    (c0, c1) <@ A(RO_G_SSample).find(pk_pke0, sk_pke0, pk_pke1, sk_pke1);
    
    (k0', r0') <@ RO_G_SSample.get(dec sk_pke0 c0, H pk_pke0);
    (k1', r1') <@ RO_G_SSample.get(dec sk_pke1 c1, H pk_pke1);
    
    return k0' = k1' /\ c0 = c1; 
  }
}.
*)

local module SFCRD_ROM_V_Split = { 
  var pk_pke0, pk_pke1 : pk_t_pke
  var sk_pke0, sk_pke1 : sk_t_pke  
  var c0, c1 : ctxt_t
   
  proc kg() : unit  = {
    (pk_pke0, sk_pke0) <$ dkg;
    (pk_pke1, sk_pke1) <$ dkg;
  }
  
  proc adv() : unit = {
    RO_G_SSample.init();
    (c0, c1) <@ A(RO_G_SSample).find(pk_pke0, sk_pke0, pk_pke1, sk_pke1);    
  }
   
  proc main() : bool = {
    var k0', k1' : key_t;
    var r0', r1' : rand_t;
    
    kg();
    
    adv();
     
    (k0', r0') <@ RO_G_SSample.get(dec sk_pke0 c0, H pk_pke0);
    (k1', r1') <@ RO_G_SSample.get(dec sk_pke1 c1, H pk_pke1);
    
    return k0' = k1' /\ c0 = c1; 
  }
}.

require import FelTactic.

local lemma testfel3 &m :
     H SFCRD_ROM_V_Split.pk_pke0{m} <> H SFCRD_ROM_V_Split.pk_pke1{m} 
  => Pr[SFCRD_ROM_V_Split.adv() @ &m : 
            fsize RO_G.m <= q_G 
            /\
            (exists (k : key_t) (r r' : rand_t),
                RO_G.m.[(dec SFCRD_ROM_V_Split.sk_pke0 SFCRD_ROM_V_Split.c0, H SFCRD_ROM_V_Split.pk_pke0)] = Some (k, r)
             /\ RO_G.m.[(dec SFCRD_ROM_V_Split.sk_pke1 SFCRD_ROM_V_Split.c0, H SFCRD_ROM_V_Split.pk_pke1)] = Some (k, r'))]
     <=
     (q_G * (q_G - 1))%r / 2%r * mu1 dkey witness.
proof.  
move=> eqH.
fel 1 
    (fsize RO_G.m) 
    (fun i => i%r * mu1 dkey witness)
    q_G
    (exists (c : ctxt_t) (k : key_t) (r r' : rand_t),
            RO_G.m.[(dec SFCRD_ROM_V_Split.sk_pke0 c, H SFCRD_ROM_V_Split.pk_pke0)] = Some (k, r)
         /\ RO_G.m.[(dec SFCRD_ROM_V_Split.sk_pke1 c, H SFCRD_ROM_V_Split.pk_pke1)] = Some (k, r'))
    [ RO_G_SSample.get : (arg \notin RO_G.m) ]
    (H SFCRD_ROM_V_Split.pk_pke0 <> H SFCRD_ROM_V_Split.pk_pke1) => //.
+ by rewrite -StdBigop.Bigreal.BRA.mulr_suml StdBigop.Bigreal.sumidE 1:ge0_qG.
+ progress.
  by exists SFCRD_ROM_V_Split.c0{m0} k r r'.
+ inline *. 
  wp; skip => />. smt(fsize_empty mem_empty).
+ proc.
  swap 1 1.
  wp.
  case (exists c, 
            (   ph = (dec SFCRD_ROM_V_Split.sk_pke0 c, H SFCRD_ROM_V_Split.pk_pke0) 
             /\ (dec SFCRD_ROM_V_Split.sk_pke1 c, H SFCRD_ROM_V_Split.pk_pke1) \in RO_G.m)
         \/ (   ph = (dec SFCRD_ROM_V_Split.sk_pke1 c, H SFCRD_ROM_V_Split.pk_pke1) 
             /\ (dec SFCRD_ROM_V_Split.sk_pke0 c, H SFCRD_ROM_V_Split.pk_pke0) \in RO_G.m)).
  + wp.
    rnd; rnd.
    skip => />.
    progress.
    apply (StdOrder.RealOrder.ler_trans (mu dkey (fun x => exists pht, pht \in RO_G.m{hr} /\ (oget RO_G.m{hr}.[pht]).`1 = x))). 
    apply mu_sub => x.
    move => -[c0 k0 r1 r'] [].
    move: H4 => [] [pheq inm].
      case (ph{hr} <> (dec SFCRD_ROM_V_Split.sk_pke0{hr} c0, Top.H SFCRD_ROM_V_Split.pk_pke0{hr})) => /= pheq2.
      + rewrite 2?get_set_neqE /#. 
      rewrite pheq get_set_eqE 1:/# get_set_neqE 1:/# => h1 h2.
      exists (dec SFCRD_ROM_V_Split.sk_pke1{hr} c0, Top.H SFCRD_ROM_V_Split.pk_pke1{hr}). split. smt().
      rewrite h2 oget_some /= /#.
    case (ph{hr} <> (dec SFCRD_ROM_V_Split.sk_pke1{hr} c0, H SFCRD_ROM_V_Split.pk_pke1{hr})) => /= pheq2.
    + by rewrite 2?get_set_neqE /#.
    rewrite pheq get_set_neqE 1:/# get_set_eqE 1:/# => h1 h2.
    exists (dec SFCRD_ROM_V_Split.sk_pke0{hr} c0, H SFCRD_ROM_V_Split.pk_pke0{hr}). split. smt().
    by rewrite h1 oget_some /= /#.
    apply Mu_mem.mu_mem_le_fsize.
    + move => ph phin.    
      rewrite  (mu_eq _ _ (pred1 (oget RO_G.m{hr}.[ph]).`1)).
      move => pr. smt(). 
      by rewrite (dkey_uni _ witness) 1,2:dkey_fu.
 conseq (: _ ==> false); 1: smt(get_setE).
  by hoare; 1: smt(StdOrder.RealOrder.mulr_ge0 ge0_mu).
+ move=> c.
  proc.
  wp.
  conseq (: _ ==> true) => //.
  progress.
  smt(fsize_set).
+ progress.
  proc.
  wp.
  by conseq (: _ ==> true).
qed.

local module Fel = {
  var c0, c1 : ctxt_t
  
  proc main(pk_pke0 : pk_t_pke, sk_pke0 : sk_t_pke, pk_pke1 : pk_t_pke, sk_pke1 : sk_t_pke) = {
    RO_G_SSample.init();
    (c0, c1) <@ A(RO_G_SSample).find(pk_pke0, sk_pke0, pk_pke1, sk_pke1);
  }
}.


local lemma testfel2 &m (pk_pke0, pk_pke1 : pk_t_pke) (sk_pke0, sk_pke1 : sk_t_pke) :
     H pk_pke0 <> H pk_pke1 
  => Pr[Fel.main(pk_pke0, sk_pke0, pk_pke1, sk_pke1) @ &m : 
            fsize RO_G.m <= q_G 
            /\
            (exists (k : key_t) (r r' : rand_t),
                RO_G.m.[(dec sk_pke0 Fel.c0, H pk_pke0)] = Some (k, r)
             /\ RO_G.m.[(dec sk_pke1 Fel.c0, H pk_pke1)] = Some (k, r'))]
     <=
     (q_G * (q_G - 1))%r / 2%r * mu1 dkey witness.
proof.  
move=> eqH.
fel 1 
    (fsize RO_G.m) 
    (fun i => i%r * mu1 dkey witness)
    q_G
    (exists (c : ctxt_t) (k : key_t) (r r' : rand_t),
            RO_G.m.[(dec sk_pke0 c, H pk_pke0)] = Some (k, r)
         /\ RO_G.m.[(dec sk_pke1 c, H pk_pke1)] = Some (k, r'))
    [ RO_G_SSample.get : (arg \notin RO_G.m) ] => //.
+ by rewrite -StdBigop.Bigreal.BRA.mulr_suml StdBigop.Bigreal.sumidE 1:ge0_qG.
+ progress.
  by exists Fel.c0{m0} k r r'.
+ inline *. 
  wp; skip => />. smt(fsize_empty mem_empty).
+ proc.
  swap 1 1.
  wp.
  case (exists c, 
            (ph = (dec sk_pke0 c, H pk_pke0) /\ (dec sk_pke1 c, H pk_pke1) \in RO_G.m)
         \/ (ph = (dec sk_pke1 c, H pk_pke1) /\ (dec sk_pke0 c, H pk_pke0) \in RO_G.m)).
  + wp.
    rnd; rnd.
    skip => />.
    progress.
    apply (StdOrder.RealOrder.ler_trans (mu dkey (fun x => exists pht, pht \in RO_G.m{hr} /\ (oget RO_G.m{hr}.[pht]).`1 = x))). 
    apply mu_sub => x.
    move => -[c0 k0 r1 r'] [].
    move: H3 => [] [pheq inm].
      case (ph{hr} <> (dec sk_pke0 c0, Top.H pk_pke0)) => /= pheq2.
      + by rewrite 2?get_set_neqE /#.
      rewrite pheq get_set_eqE 1:/# get_set_neqE 1:/# => h1 h2.
      exists (dec sk_pke1 c0, Top.H pk_pke1). split. smt().
      rewrite h2 oget_some /= /#.
    case (ph{hr} <> (dec sk_pke1 c0, Top.H pk_pke1)) => /= pheq2.
    + by rewrite 2?get_set_neqE /#.
    rewrite pheq get_set_neqE 1:/# get_set_eqE 1:/# => h1 h2.
    exists (dec sk_pke0 c0, Top.H pk_pke0). split. smt().
    by rewrite h1 oget_some /= /#.
    apply Mu_mem.mu_mem_le_fsize.
    + move => ph phin.
      rewrite  (mu_eq _ _ (pred1 (oget RO_G.m{hr}.[ph]).`1)).
      move => pr. smt(). 
      by rewrite (dkey_uni _ witness) 1,2:dkey_fu.
 conseq (: _ ==> false); 1: smt(get_setE).
  by hoare; 1: smt(StdOrder.RealOrder.mulr_ge0 ge0_mu).
+ move=> c.
  proc.
  wp.
  conseq (: _ ==> true) => //.
  progress.
  smt(fsize_set).
+ progress.
  proc.
  wp.
  by conseq (: _ ==> true).
qed.

(* 
 Even though returned ciphertexts must be equal,
 bound is still quadratic in the number of queries because,
 in the worst case, the set of ciphertexts that decrypt to a SINGLE plaintext
 under sk0 (note that, due to randomized encryption, there always are a 
 lot of ciphertexts decrypting to the same plaintext under the same secret key) while,
 simultaneously, ALL decrypt to DIFFERENT plaintexts under
 sk1. This means that "the worst case query" to G can still be a collision with
 all of the other elements in the random oracle...
 Since the Fel takes a upperbound for each step that does not depend on the 
 query input, I don't see a way to specify that a worst case query can only occur
 after having issued a lot of queries htat have probability 0 of colliding.
 As such, we get a quadratic bound.
*)
local lemma testfelopt &m (pk_pke0, pk_pke1 : pk_t_pke) (sk_pke0, sk_pke1 : sk_t_pke) :
     H pk_pke0 <> H pk_pke1 
  => Pr[Fel.main(pk_pke0, sk_pke0, pk_pke1, sk_pke1) @ &m : 
            fsize RO_G.m <= q_G 
            /\
            (exists (k : key_t) (r r' : rand_t),
                RO_G.m.[(dec sk_pke0 Fel.c0, H pk_pke0)] = Some (k, r)
             /\ RO_G.m.[(dec sk_pke1 Fel.c0, H pk_pke1)] = Some (k, r'))]
     <=
     q_G%r * mu1 dkey witness.
proof.  
move => neqHpk.
fel 1 
    (fsize RO_G.m) 
    (fun _ => mu1 dkey witness)
    q_G
    (exists (c : ctxt_t) (k : key_t) (r r' : rand_t),
            RO_G.m.[(dec sk_pke0 c, H pk_pke0)] = Some (k, r)
         /\ RO_G.m.[(dec sk_pke1 c, H pk_pke1)] = Some (k, r'))
    [ RO_G_SSample.get : (arg \notin RO_G.m) ].
+ progress.
  rewrite StdBigop.Bigreal.sumr_const. 
  rewrite List.count_predT.
  by rewrite List.Range.size_range lez_maxr; 1: smt(ge0_qG). 
+ progress. 
  exists (Fel.c0{m0}) k r r'.
  smt().
+ inline *. wp; skip => />.
  rewrite fsize_empty /=.
  do ? (rewrite negb_exists /= => ?). 
  by rewrite negb_and emptyE. 
+ proc.
  swap 1 1.
  seq 1 : true 1%r (mu1 dkey witness) 0%r _ #pre => //.
  + by rnd.
  rcondt 2; 1: by auto.
  case (exists c, 
            (ph = (dec sk_pke0 c, H pk_pke0) /\ (dec sk_pke1 c, H pk_pke1) \in RO_G.m)
         \/ (ph = (dec sk_pke1 c, H pk_pke1) /\ (dec sk_pke0 c, H pk_pke0) \in RO_G.m)).
  + wp.
    admit. 
  admit.
+ move => c.  
  proc. 
  wp.
  conseq (: _ ==> true) => //.
  progress.
  rewrite fsize_set /#.
move => b c.
proc.
wp.
by conseq (: _ ==> true).
qed.

declare axiom A_G_qs :
  hoare[A(RO_G).find : fsize RO_G.m = 0 ==> fsize RO_G.m <= q_G].

local lemma A_G_qs_S : 
  hoare[A(RO_G_SSample).find : fsize RO_G.m = 0 ==> fsize RO_G.m <= q_G].
proof.
bypr => &m eq0fsz.
have ->:
  Pr[A(RO_G_SSample).find(pk_pke0{m}, sk_pke0{m}, pk_pke1{m}, sk_pke1{m}) @ &m : ! fsize RO_G.m <= q_G]
  =
  Pr[A(RO_G).find(pk_pke0{m}, sk_pke0{m}, pk_pke1{m}, sk_pke1{m}) @ &m : ! fsize RO_G.m <= q_G].
+ byequiv => //.
  proc (={glob RO_G}) => //.
  by symmetry; conseq Eqv_ROG_ROGSS_Get.
byphoare (: fsize RO_G.m = 0 ==> _) => //; hoare => /=.
by apply A_G_qs.
qed.


lemma testPRG &m  :
  Pr[SFCRD_ROM(RO_G, A).main() @ &m : res] 
  <= 
  Pr[CRKG.main() @ &m : res]
  +
  ((q_G * (q_G - 1))%r / 2%r + 1%r) * mu1 dkey witness.
proof.
rewrite (: Pr[SFCRD_ROM(RO_G, A).main() @ &m : res] = Pr[SFCRD_ROM_V_Split.main() @ &m : res]).
+ byequiv => //.
  proc.
  do 2! call Eqv_ROG_ROGSS_Get.
  inline *.
  call (: ={glob RO_G}); 1: by apply Eqv_ROG_ROGSS_Get.
  by wp; rnd; rnd; wp. 
rewrite Pr[mu_split (H SFCRD_ROM_V_Split.pk_pke0 = H SFCRD_ROM_V_Split.pk_pke1)].
rewrite StdOrder.RealOrder.ler_add.
+ byequiv => //. 
  proc.
  inline{1} 1.
  seq 2 2 : (    #pre 
              /\ SFCRD_ROM_V_Split.sk_pke0{1} = sk_pke0{2}
              /\ SFCRD_ROM_V_Split.sk_pke1{1} = sk_pke1{2}
              /\ SFCRD_ROM_V_Split.pk_pke0{1} = pk_pke0{2} 
              /\ SFCRD_ROM_V_Split.pk_pke1{1} = pk_pke1{2}).
  + by auto. 
  conseq (: _ ==> true) => //.
  inline *; auto.
  by call{1} (A_find_ll RO_G_SSample); wp.
rewrite RField.mulrDl /=. 
pose bnd := (_ * _ / _).
byphoare => //.
proc. 
inline SFCRD_ROM_V_Split.kg.
seq 2 : true 1%r (bnd + mu1 dkey witness) 0%r _ => //. 
case (H SFCRD_ROM_V_Split.pk_pke0 = H SFCRD_ROM_V_Split.pk_pke1).
+ conseq (: _ ==> false) => />. 
  by hoare; 1: smt(ge0_mu ge0_qG).
seq 1 : (   fsize RO_G.m <= q_G /\
            exists (k : key_t) (r r' : rand_t),
                RO_G.m.[(dec SFCRD_ROM_V_Split.sk_pke0 SFCRD_ROM_V_Split.c0, H SFCRD_ROM_V_Split.pk_pke0)] = Some (k, r)
             /\ RO_G.m.[(dec SFCRD_ROM_V_Split.sk_pke1 SFCRD_ROM_V_Split.c0, H SFCRD_ROM_V_Split.pk_pke1)] = Some (k, r'))
        bnd
        1%r
        1%r
        (mu1 dkey witness) 
        (#pre /\ fsize RO_G.m <= q_G) => //.
+ conseq (: _ ==> fsize RO_G.m <= q_G) => //.  
  inline 1.
  call (A_G_qs_S).
  inline 1.
  by wp; skip => />; rewrite fsize_empty.
call (: H SFCRD_ROM_V_Split.pk_pke0 <> H SFCRD_ROM_V_Split.pk_pke1
        ==>
        fsize RO_G.m <= q_G        
        /\ exists (k : key_t) (r r' : rand_t),
          RO_G.m.[dec SFCRD_ROM_V_Split.sk_pke0 SFCRD_ROM_V_Split.c0, H SFCRD_ROM_V_Split.pk_pke0] = Some (k, r) /\
          RO_G.m.[dec SFCRD_ROM_V_Split.sk_pke1 SFCRD_ROM_V_Split.c0, H SFCRD_ROM_V_Split.pk_pke1] = Some (k, r')).
bypr => &m' neqHpk.
by apply (testfel3 &m' neqHpk). 
by trivial. 
case (SFCRD_ROM_V_Split.c0 = SFCRD_ROM_V_Split.c1).
conseq (:   (forall (k : key_t) (r r' : rand_t),
                RO_G.m.[(dec SFCRD_ROM_V_Split.sk_pke0 SFCRD_ROM_V_Split.c0, H SFCRD_ROM_V_Split.pk_pke0)] <> Some (k, r)
             \/ RO_G.m.[(dec SFCRD_ROM_V_Split.sk_pke1 SFCRD_ROM_V_Split.c0, H SFCRD_ROM_V_Split.pk_pke1)] <> Some (k, r'))
         /\ SFCRD_ROM_V_Split.c0 = SFCRD_ROM_V_Split.c1 /\ H SFCRD_ROM_V_Split.pk_pke0 <> H SFCRD_ROM_V_Split.pk_pke1
         ==> 
         k0' = k1') => [/#|/#|].
inline *.
sp 1. 
swap [5..7] -4.
sp 1.
swap 2 -1; swap 4 -2.
seq 2 : true 1%r (mu1 dkey witness) 0%r _ (#pre) => //; 1: by auto.
case (ph \notin RO_G.m). 
wp; rnd; rnd; skip => /> &m'. 
pose ph0 := (dec SFCRD_ROM_V_Split.sk_pke0{m'} SFCRD_ROM_V_Split.c1{m'}, H SFCRD_ROM_V_Split.pk_pke0{m'}).
pose ph1 := (dec SFCRD_ROM_V_Split.sk_pke1{m'} SFCRD_ROM_V_Split.c1{m'}, H SFCRD_ROM_V_Split.pk_pke1{m'}).
progress.
rewrite (mu_eq dkey _ 
               (pred1 (if ph1 \notin G_RO.RO.m{m'} then k00 else
                         (oget G_RO.RO.m{m'}.[ph1]).`1))). 
move => k /=. 
rewrite mem_set (eq_sym _ ph0) /= 2?get_set_eqE 1,2:// 2!oget_some.
by rewrite get_set_neqE 1:eq_sym 1:// /#.
case (ph1 \notin G_RO.RO.m{m'}) => phin.
by rewrite (rnd_funi _ _ _ witness) 1:is_full_funiform ?(dkey_fu, dkey_uni).  
by rewrite (rnd_funi _ _ _ witness) 1:is_full_funiform ?(dkey_fu, dkey_uni).
swap 1 1.
wp; rnd; rnd; skip => /> &m'. progress.
pose ph0 := (dec SFCRD_ROM_V_Split.sk_pke0{m'} SFCRD_ROM_V_Split.c1{m'}, H SFCRD_ROM_V_Split.pk_pke0{m'}).
pose ph1 := (dec SFCRD_ROM_V_Split.sk_pke1{m'} SFCRD_ROM_V_Split.c1{m'}, H SFCRD_ROM_V_Split.pk_pke1{m'}).
case (ph1 \notin G_RO.RO.m{m'}) => phin.
rewrite (mu_eq dkey _ (pred1 (oget G_RO.RO.m{m'}.[ph0]).`1)). 
move => k; rewrite get_set_eqE // oget_some /#.
by rewrite (rnd_funi _ _ _ witness) 1:is_full_funiform ?(dkey_fu, dkey_uni).
rewrite (mu_eq _ _ pred0). 
move => k @/pred0 /=. rewrite neqF. 
smt().
by rewrite mu0 ge0_mu.
conseq (: _ ==> false).
move => /> ? ?; rewrite negb_and; by case => />.
inline *.
do 2! (wp; do 2! rnd). 
wp; skip => /> *. 
by rewrite /pred1 -/pred0 mu0 ge0_mu.
qed.  

end section.

module type Adv_SMCRD_ROM (JO : J_RO.RO) (GO : G_RO.RO) = {
  proc find(r0 : rand_t, pk_pke0 : pk_t_pke, sk_pke0 : sk_t_pke, 
            r1 : rand_t, pk_pke1 : pk_t_pke, sk_pke1 : sk_t_pke) : ctxt_t * ctxt_t {JO.get, GO.get}
}.

module SMCRD_ROM (JO : J_RO.RO) (GO : G_RO.RO) (A : Adv_SMCRD_ROM) = {
  proc main() : bool = {
    var r0, r1 : rand_t;
    var pk_pke0, pk_pke1 : pk_t_pke;  
    var sk_pke0, sk_pke1 : sk_t_pke;
    var c0, c1 : ctxt_t;
   
    JO.init();
    GO.init();
    
    r0 <$ drand;
    (pk_pke0, sk_pke0) <$ dkg;
    
    r1 <$ drand;
    (pk_pke1, sk_pke1) <$ dkg;
    
    (c0, c1) <@ A(JO, GO).find(r0, pk_pke0, sk_pke0, r1, pk_pke1, sk_pke1);
    
    return (G (dec sk_pke0 c0, H pk_pke0)).`1 = J (r1, c1) /\ c0 = c1;
  }
}.




module type Adv_CR_ROM (JO : J_RO.RO) = {
  proc find() : (rand_t * ctxt_t) * (rand_t * ctxt_t) { JO.get }
}.

module CR_ROM (JO : J_RO.RO) (A : Adv_CR_ROM) = {
  proc main() : bool = {
    var x : rand_t * ctxt_t;
    var x' : rand_t * ctxt_t;
    
    JO.init();
    
    (x, x') <@ A(JO).find();

    return x' <> x /\ J x' = J x;
  }
}.
