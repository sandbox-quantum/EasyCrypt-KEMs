require import AllCore.

type in_t1.
type in_t2.
type out_t.

op f : in_t1 -> out_t.
op g : in_t2 -> out_t.

module type Adv_CRx2 = {
  proc find() : in_t1 * in_t2
}.

module CRx2 (A : Adv_CRx2) = {
  proc main() : bool = {
    var x1 : in_t1;
    var x2 : in_t2;

    (x1, x2) <@ A.find();
    
    return f x1 = g x2;
  }
}.


theory ROM.


module type KHF_RO1i = {
  proc init() : unit
  proc get(x : in_t1) : out_t
}.

module type KHF_RO2i = {
  proc init() : unit
  proc get(x : in_t2) : out_t
}.

module type KHF_RO1 = {
  include KHF_RO1i [init]
}.

module type KHF_RO2 = {
  include KHF_RO2i [init]
}.


module type Adv_CRx2_ROM (F_RO : KHF_RO1) (G_RO : KHF_RO2) = {
  include Adv_CRx2
}.


module CRx2_ROM (F_RO : KHF_RO1i) (G_RO : KHF_RO2i) (A : Adv_CRx2_ROM) = { 
  proc main() : bool = { 
    var x1 : in_t1;
    var x2 : in_t2;
    var y1, y2 : out_t;
    
    F_RO.init();
    G_RO.init();
    
    (x1, x2) <@ A(F_RO, G_RO).find();
  
    y1 <@ F_RO.get(x1);
    y2 <@ G_RO.get(x2);
    
    return y1 = y2;
  }
}.

end ROM.
