require import AllCore Distr FMap FelTactic.

type in_t.
type out_t.

op dout : out_t distr.

module type T = {
  proc get(x : in_t) : out_t 
}.

module type Adv (O : T) = {
  proc find() : in_t * in_t
}.

module X : T = {
  var m : (in_t, out_t) fmap
  
  proc init() = {
    m <- empty;  
  }
  
  proc get(x : in_t) = {
    var y : out_t;
    
    y <$ dout;
    if (x \notin m) {
      m.[x] <- y;
    }
    
    return oget m.[x];
  }
}.

module Y = X.


module G (A : Adv)  = {
  var x, x' : in_t
  proc main() = {
    Y.init();
    (x, x') <@ A(Y).find();
  }
}.

op q : int.

lemma fooF &m (A <: Adv {-G}) :
  Pr[G(A).main() @ &m : fsize Y.m <= q] <= q%r * mu1 dout witness.
proof.
fel 1
    (fsize Y.m)
    (fun i => i%r * mu1 dout witness)
    q
    (exists t t', t \in Y.m /\ t' \in Y.m)
    [ Y.get : (arg \notin Y.m) ].
+ admit.
+ admit.
+ admit.
+ admit.
+ admit. (* Should have (arg \notin Y.m) or even (arg \notin X.m) as precondition, but doesn't *) 
+ admit. (* Similar: should have ! (arg \notin Y.m) or even ! (arg \notin X.m), but doesn't  *)
qed.

lemma fooT &m (A <: Adv {-G}) :
  Pr[G(A).main() @ &m : fsize Y.m <= q] <= q%r * mu1 dout witness.
proof.
fel 1
    (fsize Y.m)
    (fun i => i%r * mu1 dout witness)
    q
    (exists t t', t \in Y.m /\ t' \in Y.m)
    [ X.get : (arg \notin Y.m) ].
+ admit.
+ admit.
+ admit.
+ admit.
+ admit. (* Has (arg \notin Y.m), as expected *)
+ admit. (* Has ! (arg \notin Y.m), as expected *)
qed.

module G' (A : Adv)  = {
  module Y' = {
    proc get(x : in_t) : out_t = {
      var y : out_t;
      
      y <@ Y.get(x);
      
      return y; 
    } 
  }
  
  proc main() = {
    var x, x': in_t;
 
    Y.init();
    (x, x') <@ A(Y).find();
  }
}.

